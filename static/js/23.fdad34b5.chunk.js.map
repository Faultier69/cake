{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/EasterNftCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx","state/hooks.ts"],"names":["InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","useState","isLoading","setIsLoading","value","setValue","error","setError","t","useTranslation","account","useWeb3React","contract","useERC721","getAddressByType","type","toastSuccess","useToast","handleConfirm","a","ethers","utils","isAddress","transferFrom","tx","wait","status","console","title","color","mb","nftName","name","htmlFor","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","alignItems","justifyContent","bold","endIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","refresh","isOpen","setIsOpen","profile","useProfile","identifier","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","handleSuccess","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","as","style","textAlign","NftGrid","mediaQueries","sm","md","teamNftMap","EasterNftCard","props","isClaimable","setIsClaimable","team","easterNftContract","useEasterNftContract","handleClaim","mintNFT","response","useEffect","fetchClaimStatus","nftComponents","NftList","useGetCollectibles","dispatch","useAppDispatch","handleRefresh","fetchWalletNfts","orderBy","nfts","map","Card","StyledHero","textSubtle","Collectibles","Page","scale","useGetSortedRounds","roundData","rounds","useSelector","state","predictions","Object","keys","reduce","accum","epoch","parseBigNumberObj","useGetRounds","values","useGetBetByEpoch","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","minBy","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalBlocks","intervalBlocks","useGetTotalIntervalBlocks","bufferBlocks","useGetPredictionsStatus","useGetHistoryFilter","historyFilter","useGetCurrentRoundBlockNumber","currentRoundStartBlockNumber","useGetMinBetAmount","minBetAmount","useMemo","BigNumber","from","useGetRewardRate","rewardRate","useGetIsFetchingHistory","isFetchingHistory","useGetHistoryByAccount","history","useGetLastOraclePrice","lastOraclePrice","collectibles","isInitialized","data","identifiers","nftsInWallet","Nfts","filter","includes"],"mappings":"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","file":"static/js/23.fdad34b5.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\nimport { getAddressByType } from 'utils/collectibles'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const contract = useERC721(getAddressByType(nft.type))\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = ethers.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'))\n      } else {\n        const tx = await contract.transferFrom(account, value, tokenIds[0])\n        setIsLoading(true)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          onDismiss()\n          onSuccess()\n          toastSuccess(t('NFT successfully transferred!'))\n        } else {\n          setError(t('Unable to transfer NFT'))\n          setIsLoading(false)\n        }\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{t('Transferring')}:</Text>\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={t('Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    const tx = await onClaim()\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Successfully claimed!'))\n      onDismiss()\n      onSuccess()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  return (\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{t('You will receive')}:</Text>\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!account}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Nft } from 'config/constants/types'\n\ninterface PreviewProps {\n  nft: Nft\n  isOwned?: boolean\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 24px 24px 0 0;\n`\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`\n\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\n  const { images, name, video } = nft\n  const previewImageSrc = `/images/nfts/${images.lg}`\n\n  if (video) {\n    const videoComponent = (\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\n        <source src={video.webm} type=\"video/webm\" />\n        <source src={video.mp4} type=\"video/mp4\" />\n      </StyledVideo>\n    )\n\n    return isOwned ? (\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n        {videoComponent}\n      </a>\n    ) : (\n      videoComponent\n    )\n  }\n\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\n\n  return (\n    <Container>\n      {isOwned ? (\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\nexport interface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onClaim?: () => Promise<ethers.providers.TransactionResponse>\n  refresh: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const { profile } = useProfile()\n  const { identifier, name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    refresh()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {t('In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.identifier === identifier && (\n            <Tag outline variant=\"success\">\n              {t('Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {t('Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {t('Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {t('Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {t(description)}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useProfile } from 'state/profile/hooks'\nimport { useEasterNftContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\n/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3,\n}\n\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const { identifier } = nft\n  const { team } = profile ?? {}\n  const easterNftContract = useEasterNftContract()\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\n    await response.wait()\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.canClaim(account)\n\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\n    }\n\n    if (account && team) {\n      fetchClaimStatus()\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default EasterNftCard\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport { useWeb3React } from '@web3-react/core'\nimport nfts from 'config/constants/nfts'\nimport { useAppDispatch } from 'state'\nimport { fetchWalletNfts } from 'state/collectibles'\nimport { useGetCollectibles } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport EasterNftCard from './NftCard/EasterNftCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  'easter-storm': EasterNftCard,\n  'easter-flipper': EasterNftCard,\n  'easter-caker': EasterNftCard,\n}\n\nconst NftList = () => {\n  const { tokenIds } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleRefresh = () => {\n    dispatch(fetchWalletNfts(account))\n  }\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const Card = nftComponents[nft.identifier] || NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n          {t('Pancake Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n","import { useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport Nfts from 'config/constants/nfts'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from './types'\nimport { fetchWalletNfts } from './collectibles'\nimport { parseBigNumberObj } from './predictions/helpers'\n\n// /!\\\n// Don't add anything here. These hooks will be moved the the predictions folder\n\n// Predictions\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetRewardRate = () => {\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\n  return rewardRate / 100\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!ledgers[account]) {\n    return null\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null\n  }\n\n  return ledgers[account][roundId]\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n// Collectibles\nexport const useGetCollectibles = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n"],"sourceRoot":""}